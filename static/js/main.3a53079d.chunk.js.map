{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/scroll.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","Card","key","Scroll","props","style","overflowY","borderTop","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","res","json","users","_this$state","filterRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_scroll","components_CardList","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCLSC,SAZF,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACzB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA0BT,EAA1B,cACtBG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,OCeOQ,EAlBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAChB,OACIR,EAAAC,EAAAC,cAAA,WAEQM,EAAOC,IAAI,SAACC,EAAMC,GACd,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKH,EAAKb,GACVA,GAAIW,EAAOG,GAAGd,GACdC,KAAMU,EAAOG,GAAGb,KAChBC,MAAOS,EAAOG,GAAGZ,YCL9Be,EARA,SAACC,GACZ,OACIf,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAACC,UAAU,SAAUC,UAAW,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCSJC,EAZG,SAAAzB,GAAmCA,EAAhC0B,YAAgC,IAAnBC,EAAmB3B,EAAnB2B,aAC9B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACbqB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCsCXI,cAtCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAd1CX,EAAKY,MAAQ,CAEThC,OAAQ,GACRc,YAAa,IALPM,mFASM,IAAAa,EAAAV,KAChBW,MAAM,8CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAE7B,OAAQsC,uCAMtC,IAAAC,EAC2BhB,KAAKS,MAA7BhC,EADHuC,EACGvC,OAAQc,EADXyB,EACWzB,YACV0B,EACFxC,EAAOyC,OAAO,SAAAC,GAAK,OACfA,EAAMpD,KAAKqD,cAAcC,SAAS9B,EAAY6B,iBACtD,OAAQ3C,EAAO6C,OAIPrD,EAAAC,EAAAC,cAAA,OAAMC,UAAU,MACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,gBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAW/B,aAAcQ,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACqD,EAAD,KAASvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,IAA3B,MANRhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,qBAzBMsD,aCGlBC,IAASC,OAAQ3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SNuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.3a53079d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nconst card = ({id, name, email}) =>{\nreturn(\n    \n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \n    <img alt= 'Robots' src={`https://robohash.org/${id}?200x200`}/>\n    <div> \n    <h1>{name}</h1>\n    <p>{email}</p>\n    </div>\n    </div>\n)\n}\nexport default card; ","import React from 'react';\nimport Card from './Card'\n\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={user.id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />)\n                })\n            }\n        </div>\n    )\n\n}\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY:'scroll', borderTop: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll; ","import React from 'react'\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}></input>\n        </div>\n    )\n\n\n}\nexport default SearchBox; ","import React, { Component } from 'react';\nimport './app.css';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/scroll';\nimport SearchBox from '../components/SearchBox';\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n\n            robots: [],\n            searchField: ''\n\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(res => res.json())\n            .then(users => this.setState({ robots: users }));\n\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchField: event.target.value })\n    }\n    render() {\n        const { robots, searchField } = this.state;\n        const filterRobots =\n            robots.filter(robot =>\n                robot.name.toLowerCase().includes(searchField.toLowerCase()))\n        return !robots.length ?\n            <h1 className=\"pokemonFont f1 tc\">Loading...</h1> :\n\n            (\n                < div className='tc' >\n                    <h1 className=\"pokemonFont f1\"> RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll ><CardList robots={filterRobots} /> </Scroll>\n                </div >\n            )\n    }\n}\n\n\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\n\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}